version: '3.8'

services:
  management-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: management-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Layer Services - MACH Architecture
      - MANAGEMENT_SYSTEM_REPO_URL=http://management-system-repo:8080
      - MANAGEMENT_SYSTEM_REPO_API_KEY=${MANAGEMENT_SYSTEM_REPO_API_KEY:-dev_api_key}
      - TENANT_MGMT_SERVICE_URL=http://tenant-mgmt-service:8000
      - TENANT_MGMT_SERVICE_API_KEY=${TENANT_MGMT_SERVICE_API_KEY:-dev_api_key}
      - USER_DATA_SERVICE_URL=http://user-data-service:8000
      - USER_DATA_SERVICE_API_KEY=${USER_DATA_SERVICE_API_KEY:-dev_api_key}
      - TASK_REPO_SERVICE_URL=http://task-repo-service:8000
      - TASK_REPO_SERVICE_API_KEY=${TASK_REPO_SERVICE_API_KEY:-dev_api_key}
      
      # API settings
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_TITLE="Management Systems API"
      - API_VERSION=1.0.0
      
      # Cache settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Plugin settings
      - PLUGINS_ENABLED=true
      - PLUGINS_WATCH=true
      - PLUGINS_DIR=/app/plugins
    volumes:
      - ./src:/app/src:ro
      - ./plugins:/app/plugins
      - ../database-layer:/app/database-layer:ro
    networks:
      - system-repo-network
      - tenant-service-network
      - user-service-network
      - task-service-network
    depends_on:
      - redis
      - management-system-repo
      - tenant-mgmt-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  system-repo-network:
    external: true
    name: database-layer_system-repo-network
  tenant-service-network:
    external: true
    name: database-layer_tenant-service-network
  user-service-network:
    external: true
    name: database-layer_user-service-network
  task-service-network:
    external: true
    name: database-layer_task-service-network
  redis-network:
    driver: bridge 